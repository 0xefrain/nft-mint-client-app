{"ast":null,"code":"var _jsxFileName = \"/home/0xefrain/Documents/buildspace/epic_nfts_app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './styles/App.css';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport myEpicNft from './utils/MyEpicNFT.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = '0xefrain';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\nconst CONTRACT_ADDRESS = \"0xCDEfedF3BDfF101fD7D72252aAb5Cd98A2D195D1\"; // rinkeby contract\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [totalMinted, setTotalMinted] = useState(\"\");\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account); // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Setup our listener.\n\n\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer); // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n        });\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkNFTsMinted = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n        let totalNFTsMinted = await connectedContract.getTotalNFTsMinted();\n        setTotalMinted(totalNFTsMinted.toNumber());\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n\n  const renderMintUI = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: askContractToMintNft,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Mint NFT\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"My NFT Collection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Each unique. Each beautiful. Discover your NFT today.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), currentAccount === \"\" ? renderNotConnectedContainer() : renderMintUI(), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text-2\",\n          children: [\" Minted \", totalMinted, \"/\", TOTAL_MINT_COUNT, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"link\",\n          children: [\"View collection on \", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://testnets.opensea.io/collection/tyrannft-v3\",\n            children: [\"opensea \", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), \"\\uD83C\\uDF0A\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built for @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"7d71aB/EUYflrGAzRhj31wwzlr0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/0xefrain/Documents/buildspace/epic_nfts_app/src/App.js"],"names":["ethers","React","useEffect","useState","myEpicNft","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","totalMinted","setTotalMinted","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","setupEventListener","connectWallet","alert","error","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","on","from","tokenId","toNumber","askContractToMintNft","nftTxn","makeAnEpicNFT","wait","hash","checkNFTsMinted","totalNFTsMinted","getTotalNFTsMinted","renderNotConnectedContainer","renderMintUI","twitterLogo"],"mappings":"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","sourcesContent":["import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport myEpicNft from './utils/MyEpicNFT.json';\n\nconst TWITTER_HANDLE = '0xefrain';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\n\nconst CONTRACT_ADDRESS = \"0xCDEfedF3BDfF101fD7D72252aAb5Cd98A2D195D1\"; // rinkeby contract\n\nconst App = () => {\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [totalMinted, setTotalMinted] = useState(\"\");\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account)\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n      setupEventListener()\n    } else {\n      console.log(\"No authorized account found\")\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n      setupEventListener()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n\n  // Setup our listener.\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber())\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n\n        console.log(\"Setup event listener!\")\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n\n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const checkNFTsMinted = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        let totalNFTsMinted = await connectedContract.getTotalNFTsMinted();\n\n        setTotalMinted(totalNFTsMinted.toNumber());\n      }\n\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n \n\n\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  const renderMintUI = () => (\n    <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n      Mint NFT\n    </button>\n  )\n  useEffect(() => {\n    checkIfWalletIsConnected()\n  }, [])\n  useEffect(() => {\n    checkIfWalletIsConnected()\n  }, [])\n\n \n\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {currentAccount === \"\" ? renderNotConnectedContainer() : renderMintUI()}\n\n          <p className=\"sub-text-2\"> Minted {totalMinted}/{TOTAL_MINT_COUNT} </p>\n\n\n          <p className='link'>\n            View collection on {\" \"}\n            <a href='https://testnets.opensea.io/collection/tyrannft-v3'>\n              opensea {\" \"}\n            </a>\n            🌊\n          </p>\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built for @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}